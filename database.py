import aiosqlite
import asyncio
from typing import Optional

class UserDatabase:
    def __init__(self, db_path: str = "users.db"):
        self.db_path = db_path
    
    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    balance INTEGER DEFAULT 0,
                    total_bets INTEGER DEFAULT 0,
                    total_wins INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            await db.commit()
    
    async def get_user(self, user_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(
                "SELECT * FROM users WHERE user_id = ?", 
                (user_id,)
            )
            row = await cursor.fetchone()
            return dict(row) if row else None
    
    async def create_user(self, user_id: int, username: str = None, first_name: str = None) -> dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º 1000 ‚≠ê"""
        async with aiosqlite.connect(self.db_path) as db:
            # üéÅ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å: 1000 –∑–≤—ë–∑–¥ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤!
            initial_balance = 1000
            await db.execute("""
                INSERT INTO users (user_id, username, first_name, balance)
                VALUES (?, ?, ?, ?)
            """, (user_id, username, first_name, initial_balance))
            await db.commit()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return await self.get_user(user_id)
    
    async def get_or_create_user(self, user_id: int, username: str = None, first_name: str = None) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ"""
        user = await self.get_user(user_id)
        if not user:
            user = await self.create_user(user_id, username, first_name)
        return user
    
    async def get_balance(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self.get_user(user_id)
        return user['balance'] if user else 0
    
    async def update_balance(self, user_id: int, new_balance: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        # üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!
        if new_balance < 0:
            print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å {new_balance} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            new_balance = 0
        
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("""
                UPDATE users 
                SET balance = ?, updated_at = CURRENT_TIMESTAMP 
                WHERE user_id = ?
            """, (new_balance, user_id))
            await db.commit()
    
    async def add_balance(self, user_id: int, amount: int) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å/–æ—Ç–Ω—è—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_balance = await self.get_balance(user_id)
        new_balance = max(0, current_balance + amount)  # –ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        await self.update_balance(user_id, new_balance)
        return new_balance
    
    async def record_bet(self, user_id: int, bet_amount: int, win_amount: int):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–≤–∫–µ –∏ –≤—ã–∏–≥—Ä—ã—à–µ"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("""
                UPDATE users 
                SET total_bets = total_bets + ?, 
                    total_wins = total_wins + ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            """, (bet_amount, win_amount, user_id))
            await db.commit()
    
    async def get_user_stats(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self.get_user(user_id)
        if not user:
            return None
        
        return {
            'balance': user['balance'],
            'total_bets': user['total_bets'],
            'total_wins': user['total_wins'],
            'profit': user['total_wins'] - user['total_bets'],
            'created_at': user['created_at']
        }
    
    async def get_top_users(self, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É"""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute("""
                SELECT user_id, username, first_name, balance, total_wins, total_bets
                FROM users 
                ORDER BY balance DESC 
                LIMIT ?
            """, (limit,))
            rows = await cursor.fetchall()
            return [dict(row) for row in rows]
    
    async def reset_user_balance(self, user_id: int, new_balance: int = 0):
        """–°–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.update_balance(user_id, new_balance)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = UserDatabase()