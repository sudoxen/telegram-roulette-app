#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–æ—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
"""

import asyncio
from database import db

class MockMessage:
    """–ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self, user_id, username, first_name):
        self.from_user = MockUser(user_id, username, first_name)

class MockUser:
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self, user_id, username, first_name):
        self.id = user_id
        self.username = username
        self.first_name = first_name

async def test_bot_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –±–µ–∑ Telegram API"""
    print("ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–æ—Ç–∞")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start")
    mock_message = MockMessage(123456789, "test_user", "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    
    user_id = mock_message.from_user.id
    username = mock_message.from_user.username
    first_name = mock_message.from_user.first_name
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start)
    user = await db.get_or_create_user(user_id, username, first_name)
    balance = user['balance']
    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} (@{username})")
    print(f"   üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /balance
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /balance")
    balance = await db.get_balance(user_id)
    print(f"   üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∏–≥—Ä—ã (Web App data)
    print("\nüé≤ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É")
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É 200, –≤—ã–∏–≥—Ä—ã—à 400 (–º–Ω–æ–∂–∏—Ç–µ–ª—å 2X)
    bet = 200
    win = 400
    new_balance = balance - bet + win
    
    await db.update_balance(user_id, new_balance)
    await db.record_bet(user_id, bet, win)
    
    print(f"   üéØ –°—Ç–∞–≤–∫–∞: {bet} ‚≠ê")
    print(f"   üèÜ –í—ã–∏–≥—Ä—ã—à: {win} ‚≠ê")
    print(f"   üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚≠ê")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /stats
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /stats")
    stats = await db.get_user_stats(user_id)
    if stats:
        profit_emoji = "üìà" if stats['profit'] >= 0 else "üìâ"
        print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: {stats['balance']} ‚≠ê")
        print(f"   üéØ –û–±—â–∏—Ö —Å—Ç–∞–≤–æ–∫: {stats['total_bets']} ‚≠ê")
        print(f"   üèÜ –û–±—â–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π: {stats['total_wins']} ‚≠ê")
        print(f"   {profit_emoji} –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {stats['profit']} ‚≠ê")
    
    # –°–æ–∑–¥–∞–µ–º –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–æ–ø–∞
    print("\nüë• –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–æ–ø–∞")
    test_users = [
        (987654321, "winner_alice", "–ê–ª–∏—Å–∞"),
        (987654322, "lucky_bob", "–ë–æ–±"),
        (987654323, "pro_charlie", "–ß–∞—Ä–ª–∏")
    ]
    
    for i, (uid, uname, fname) in enumerate(test_users):
        await db.get_or_create_user(uid, uname, fname)
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        fake_balance = 1000 + i * 500
        await db.update_balance(uid, fake_balance)
        await db.record_bet(uid, 100, 200 + i * 100)
        print(f"   ‚úÖ {fname} - –±–∞–ª–∞–Ω—Å: {fake_balance} ‚≠ê")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /top
    print("\nüèÜ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /top")
    top_users = await db.get_top_users(5)
    for i, user in enumerate(top_users, 1):
        emoji = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"][min(i-1, 4)]
        profit = user['total_wins'] - user['total_bets']
        print(f"   {emoji} {user['first_name']} - {user['balance']} ‚≠ê (–ø—Ä–∏–±—ã–ª—å: {profit:+d})")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /reset
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /reset")
    await db.reset_user_balance(user_id, 1000)
    reset_balance = await db.get_balance(user_id)
    print(f"   üîÑ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {reset_balance} ‚≠ê")
    
    print("\n‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print("üîó –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –≤ telegram_bot.py")
    print("üí° –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")

if __name__ == "__main__":
    asyncio.run(test_bot_functions())