#!/usr/bin/env python3
"""
üîç –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π —à–∞–≥ –ø–µ—Ä–µ–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –±–æ—Ç–∞ –∫ Web App
"""

import time
from urllib.parse import urlparse, parse_qs

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
WEB_APP_URL = "https://sudoxen.github.io/telegram-roulette-app/"
TEST_USER_ID = 123456789
TEST_BALANCE = 1500

def test_url_generation():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL —Å –±–∞–ª–∞–Ω—Å–æ–º")
    print("=" * 60)
    
    timestamp = int(time.time())
    webapp_url = f"{WEB_APP_URL}?balance={TEST_BALANCE}&user_id={TEST_USER_ID}&v={timestamp}&t={timestamp}"
    
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL:")
    print(f"   {webapp_url}")
    print()
    
    # –ü–∞—Ä—Å–∏–º URL
    parsed = urlparse(webapp_url)
    params = parse_qs(parsed.query)
    
    print(f"üìã –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   - balance: {params.get('balance', ['–ù–ï–¢'])[0]}")
    print(f"   - user_id: {params.get('user_id', ['–ù–ï–¢'])[0]}")
    print(f"   - v (–≤–µ—Ä—Å–∏—è): {params.get('v', ['–ù–ï–¢'])[0]}")
    print(f"   - t (timestamp): {params.get('t', ['–ù–ï–¢'])[0]}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    balance_ok = params.get('balance', [''])[0] == str(TEST_BALANCE)
    user_id_ok = params.get('user_id', [''])[0] == str(TEST_USER_ID)
    version_ok = 'v' in params
    timestamp_ok = 't' in params
    
    print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print(f"   {'‚úÖ' if balance_ok else '‚ùå'} –ë–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print(f"   {'‚úÖ' if user_id_ok else '‚ùå'} User ID –ø–µ—Ä–µ–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print(f"   {'‚úÖ' if version_ok else '‚ùå'} –í–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    print(f"   {'‚úÖ' if timestamp_ok else '‚ùå'} –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    print()
    
    return balance_ok and user_id_ok and version_ok and timestamp_ok


def simulate_webapp_parsing(url):
    """–¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ Web App"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ 2: –°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ Web App (JavaScript)")
    print("=" * 60)
    
    print(f"üì• –í—Ö–æ–¥—è—â–∏–π URL: {url}")
    print()
    
    # –ü–∞—Ä—Å–∏–º –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç JavaScript
    parsed = urlparse(url)
    params = parse_qs(parsed.query)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º balance
    balance_str = params.get('balance', [''])[0]
    
    print(f"üîç –ü—Ä–æ—Ü–µ—Å—Å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:")
    print(f"   1. URLSearchParams.get('balance') = '{balance_str}'")
    
    try:
        balance = int(balance_str)
        print(f"   2. parseInt('{balance_str}') = {balance}")
        print(f"   3. –ü—Ä–æ–≤–µ—Ä–∫–∞ isNaN({balance}) = False")
        print(f"   4. –ü—Ä–æ–≤–µ—Ä–∫–∞ {balance} > 0 = {balance > 0}")
        
        if balance > 0:
            print(f"   ‚úÖ –£–°–ü–ï–•: –ë–∞–ª–∞–Ω—Å {balance} –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
            return balance
        else:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            return None
    except ValueError:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{balance_str}' –≤ —á–∏—Å–ª–æ")
        return None


def check_webapp_logic():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ Web App"""
    print()
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ 3: –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ Web App")
    print("=" * 60)
    
    scenarios = [
        ("–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å", f"?balance=1500&user_id=123", 1500),
        ("–ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å", f"?balance=0&user_id=123", None),
        ("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å", f"?balance=-100&user_id=123", None),
        ("–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ balance", f"?user_id=123", None),
        ("–ü—É—Å—Ç–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä", f"?balance=&user_id=123", None),
        ("–¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞", f"?balance=abc&user_id=123", None),
    ]
    
    all_ok = True
    for scenario_name, query, expected in scenarios:
        url = WEB_APP_URL + query
        parsed = urlparse(url)
        params = parse_qs(parsed.query)
        balance_str = params.get('balance', [''])[0]
        
        try:
            balance = int(balance_str) if balance_str else None
            if balance is not None and balance <= 0:
                balance = None
        except ValueError:
            balance = None
        
        success = (balance == expected)
        emoji = "‚úÖ" if success else "‚ùå"
        print(f"   {emoji} {scenario_name}: {balance} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        
        if not success:
            all_ok = False
    
    print()
    return all_ok


def simulate_full_flow():
    """–¢–µ—Å—Ç 4: –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç—ã"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ 4: –ü–û–õ–ù–´–ô –ü–û–¢–û–ö –†–ê–ë–û–¢–´ (—Å–∏–º—É–ª—è—Ü–∏—è)")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç /start
    print("\nüë§ –®–ê–ì 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç /start")
    print(f"   User ID: {TEST_USER_ID}")
    print(f"   –ë–∞–ª–∞–Ω—Å –≤ –ë–î: {TEST_BALANCE} ‚≠ê")
    
    # –®–∞–≥ 2: –ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL
    print("\nü§ñ –®–ê–ì 2: –ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    timestamp = int(time.time())
    webapp_url = f"{WEB_APP_URL}?balance={TEST_BALANCE}&user_id={TEST_USER_ID}&v={timestamp}&t={timestamp}"
    print(f"   URL: {webapp_url}")
    
    # –®–∞–≥ 3: Web App –ø–æ–ª—É—á–∞–µ—Ç URL
    print("\nüåê –®–ê–ì 3: Web App –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ –ø–∞—Ä—Å–∏—Ç URL")
    parsed = urlparse(webapp_url)
    params = parse_qs(parsed.query)
    balance_str = params.get('balance', [''])[0]
    
    try:
        balance = int(balance_str)
        print(f"   ‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω: {balance} ‚≠ê")
        
        # –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        print("\nüé® –®–ê–ì 4: Web App –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print(f"   balanceEl.textContent = '{balance} ‚≠ê'")
        print(f"   –ö–Ω–æ–ø–∫–∞ '–ò–≥—Ä–∞—Ç—å': {'–¥–æ—Å—Ç—É–ø–Ω–∞' if balance >= 200 else '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'}")
        
        # –®–∞–≥ 5: –ò–≥—Ä–∞
        print("\nüé≤ –®–ê–ì 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞–µ—Ç")
        bet = 200
        multiplier = 1  # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞
        win = bet * multiplier
        new_balance = balance - bet + win
        print(f"   –°—Ç–∞–≤–∫–∞: {bet} ‚≠ê")
        print(f"   –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier}X")
        print(f"   –í—ã–∏–≥—Ä—ã—à: {win} ‚≠ê")
        print(f"   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚≠ê")
        
        # –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç—É
        print("\nüì§ –®–ê–ì 6: Web App –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É")
        game_data = {
            'action': 'bet_result',
            'bet': bet,
            'multiplier': multiplier,
            'win': win,
            'balance': new_balance
        }
        print(f"   –î–∞–Ω–Ω—ã–µ: {game_data}")
        
        # –®–∞–≥ 7: –ë–æ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î
        print("\nüíæ –®–ê–ì 7: –ë–æ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print(f"   UPDATE users SET balance = {new_balance} WHERE user_id = {TEST_USER_ID}")
        print(f"   ‚úÖ –ë–∞–ª–∞–Ω—Å –≤ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω: {new_balance} ‚≠ê")
        
        # –®–∞–≥ 8: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ
        print("\nüîÑ –®–ê–ì 8: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Web App —Å–Ω–æ–≤–∞")
        timestamp2 = int(time.time())
        webapp_url2 = f"{WEB_APP_URL}?balance={new_balance}&user_id={TEST_USER_ID}&v={timestamp2}&t={timestamp2}"
        print(f"   –ù–æ–≤—ã–π URL: {webapp_url2}")
        
        parsed2 = urlparse(webapp_url2)
        params2 = parse_qs(parsed2.query)
        balance_str2 = params2.get('balance', [''])[0]
        balance2 = int(balance_str2)
        print(f"   ‚úÖ –ë–∞–ª–∞–Ω—Å —Å–Ω–æ–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω: {balance2} ‚≠ê")
        print(f"   {'‚úÖ –£–°–ü–ï–•' if balance2 == new_balance else '‚ùå –û–®–ò–ë–ö–ê'}: –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False


def check_current_webapp():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ Web App –Ω–∞ GitHub Pages"""
    print()
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ GitHub Pages")
    print("=" * 60)
    
    print(f"\nüìç URL Web App: {WEB_APP_URL}")
    print("\n‚ùì –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–û–ü–†–û–°:")
    print("   –ö–∞–∫–æ–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É?")
    print()
    print("   üî¥ –ï—Å–ª–∏ —ç—Ç–æ index.html (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è):")
    print("      - –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –í–°–ï–ì–î–ê 567 (hardcoded)")
    print("      - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã URL –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è")
    print("      - –ü–†–û–ë–õ–ï–ú–ê: –ù—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª!")
    print()
    print("   üü¢ –ï—Å–ª–∏ —ç—Ç–æ index_improved.html (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è):")
    print("      - –ë–∞–ª–∞–Ω—Å –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ URL")
    print("      - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("      - –í–°–ï –•–û–†–û–®–û")
    print()
    print("üìã –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:")
    print("   1. –û—Ç–∫—Ä–æ–π https://sudoxen.github.io/telegram-roulette-app/")
    print("   2. –û—Ç–∫—Ä–æ–π DevTools (F12)")
    print("   3. –í Console –ø—Ä–æ–≤–µ—Ä—å: console.log(window.location.href)")
    print("   4. –î–æ–±–∞–≤—å ?balance=9999 –∫ URL")
    print("   5. –û–±–Ω–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    print("   6. –ü—Ä–æ–≤–µ—Ä—å: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ –±–∞–ª–∞–Ω—Å 9999?")
    print()
    print("‚ö†Ô∏è  –ï–°–õ–ò –ë–ê–õ–ê–ù–° –ù–ï –ú–ï–ù–Ø–ï–¢–°–Ø = –§–ê–ô–õ –ù–ï –û–ë–ù–û–í–õ–ï–ù!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("\n" + "=" * 60)
    print("üîç –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ë–ê–õ–ê–ù–°–ê")
    print("=" * 60)
    print()
    
    results = []
    
    # –¢–µ—Å—Ç 1
    results.append(("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL", test_url_generation()))
    
    # –¢–µ—Å—Ç 2
    timestamp = int(time.time())
    test_url = f"{WEB_APP_URL}?balance={TEST_BALANCE}&user_id={TEST_USER_ID}&v={timestamp}"
    balance = simulate_webapp_parsing(test_url)
    results.append(("–ü–∞—Ä—Å–∏–Ω–≥ URL", balance == TEST_BALANCE))
    
    # –¢–µ—Å—Ç 3
    results.append(("–õ–æ–≥–∏–∫–∞ Web App", check_webapp_logic()))
    
    # –¢–µ—Å—Ç 4
    results.append(("–ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫", simulate_full_flow()))
    
    # –¢–µ—Å—Ç 5
    check_current_webapp()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    
    for test_name, success in results:
        emoji = "‚úÖ" if success else "‚ùå"
        print(f"   {emoji} {test_name}: {'–ü–†–û–ô–î–ï–ù' if success else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    all_passed = all(success for _, success in results)
    
    print()
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print()
        print("üîç –í–´–í–û–î:")
        print("   –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–æ—Ç–∞ –∏ Web App.")
        print()
        print("‚ö†Ô∏è  –í–ï–†–û–Ø–¢–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
        print("   –ù–∞ GitHub Pages –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –°–¢–ê–†–ê–Ø –≤–µ—Ä—Å–∏—è index.html")
        print("   –≤–º–µ—Å—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π index_improved.html")
        print()
        print("‚úÖ –†–ï–®–ï–ù–ò–ï:")
        print("   1. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π index_improved.html ‚Üí index.html")
        print("   2. –ó–∞–≥—Ä—É–∑–∏ –Ω–∞ GitHub")
        print("   3. git add index.html")
        print("   4. git commit -m 'Fix balance sync'")
        print("   5. git push")
        print("   6. –ü–æ–¥–æ–∂–¥–∏ 1-2 –º–∏–Ω—É—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GitHub Pages")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("   –ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    
    print()
    print("=" * 60)


if __name__ == '__main__':
    main()
