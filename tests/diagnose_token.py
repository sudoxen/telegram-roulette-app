#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–û–ö–ï–ù–ê TELEGRAM –ë–û–¢–ê
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
"""

import re
import asyncio
import aiohttp

def validate_token_format(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞"""
    print("üîç –ê–ù–ê–õ–ò–ó –§–û–†–ú–ê–¢–ê –¢–û–ö–ï–ù–ê")
    print("-" * 40)
    
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π!")
        return False
    
    print(f"üìù –¢–æ–∫–µ–Ω: {token}")
    print(f"üìè –î–ª–∏–Ω–∞: {len(token)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    if ":" not in token:
        print("‚ùå –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ (:)")
        return False
    
    parts = token.split(":")
    if len(parts) != 2:
        print("‚ùå –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ –¥–≤–æ–µ—Ç–æ—á–∏–µ")
        return False
    
    bot_id, bot_hash = parts
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –±–æ—Ç–∞
    print(f"ü§ñ Bot ID: {bot_id}")
    if not bot_id.isdigit():
        print("‚ùå Bot ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
        return False
    
    if len(bot_id) < 8 or len(bot_id) > 12:
        print("‚ùå Bot ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 8-12 —Ü–∏—Ñ—Ä")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞
    print(f"üîë Bot Hash: {bot_hash}")
    if len(bot_hash) != 35:
        print(f"‚ùå Hash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 35 —Å–∏–º–≤–æ–ª–æ–≤ (—Ç–µ–∫—É—â–∞—è: {len(bot_hash)})")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ö–µ—à–µ
    if not re.match(r'^[A-Za-z0-9_-]+$', bot_hash):
        print("‚ùå Hash —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
        return False
    
    print("‚úÖ –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
    return True

async def check_token_with_telegram(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram API"""
    print("\nüåê –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê –ß–ï–†–ï–ó TELEGRAM API")
    print("-" * 40)
    
    url = f"https://api.telegram.org/bot{token}/getMe"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    if data.get('ok'):
                        bot_info = data.get('result', {})
                        print("‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π!")
                        print(f"ü§ñ –ò–º—è –±–æ—Ç–∞: {bot_info.get('first_name')}")
                        print(f"üë§ Username: @{bot_info.get('username')}")
                        print(f"üÜî ID: {bot_info.get('id')}")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('description')}")
                        return False
                elif response.status == 401:
                    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (401 Unauthorized)")
                    return False
                elif response.status == 404:
                    print("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404 Not Found)")
                    return False
                else:
                    text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status}: {text}")
                    return False
                    
    except asyncio.TimeoutError:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API")
        return False
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False

def check_common_issues(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º"""
    print("\nüîß –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–ò–ß–ù–´–• –ü–†–û–ë–õ–ï–ú")
    print("-" * 40)
    
    issues = []
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    if token != token.strip():
        issues.append("–õ–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ —Ç–æ–∫–µ–Ω–∞")
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    if '\n' in token or '\r' in token:
        issues.append("–¢–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫")
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–≤—ã—á–∫–∞–º–∏
    if token.startswith('"') and token.endswith('"'):
        issues.append("–¢–æ–∫–µ–Ω –æ–±–µ—Ä–Ω—É—Ç –≤ –∫–∞–≤—ã—á–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ –ª–∏—à–Ω–∏–µ)")
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if '\\' in token:
        issues.append("–¢–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ (—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)")
    
    if issues:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for i, issue in enumerate(issues, 1):
            print(f"   {i}. {issue}")
        return False
    else:
        print("‚úÖ –¢–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        return True

async def diagnose_token():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
    # –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open("telegram_bot.py", "r", encoding="utf-8") as f:
            content = f.read()
        
        # –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ
        import re
        match = re.search(r'BOT_TOKEN\s*=\s*["\']([^"\']+)["\']', content)
        if not match:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ BOT_TOKEN –≤ —Ñ–∞–π–ª–µ telegram_bot.py")
            return
        
        token = match.group(1)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–û–ö–ï–ù–ê TELEGRAM –ë–û–¢–ê")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    format_ok = validate_token_format(token)
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    common_ok = check_common_issues(token)
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
    if format_ok:
        api_ok = await check_token_with_telegram(token)
    else:
        api_ok = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 50)
    
    if format_ok and common_ok and api_ok:
        print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
        print("ü§î –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ aiogram:")
        print("   - –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è aiogram")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        print("   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã Telegram API")
    elif format_ok and common_ok and not api_ok:
        print("‚ùå –¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        print("üí° –†–µ—à–µ–Ω–∏—è:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞")
        print("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–æ–∫–µ–Ω–∞")
        print("üí° –†–µ—à–µ–Ω–∏—è:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É @BotFather")
        print("   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω —Ç–æ—á–Ω–æ –∫–∞–∫ –µ—Å—Ç—å")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤")

if __name__ == "__main__":
    asyncio.run(diagnose_token())