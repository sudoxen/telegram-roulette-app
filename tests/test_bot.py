#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø –ë–û–¢–ê –° –õ–û–ö–ê–õ–¨–ù–´–ú WEB APP
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞
"""

import asyncio
import json
from aiogram import Bot, Dispatcher, F
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, MenuButtonWebApp, BotCommand
from aiogram.filters import Command
from database import db

# üîë –¢–û–ö–ï–ù –û–¢ BOTFATHER
BOT_TOKEN = "8211492486:AAEdPWoquZmjHdDaf0e-lqLrkjn57K8q-gM"

# üß™ –õ–û–ö–ê–õ–¨–ù–´–ô URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
LOCAL_WEB_APP_URL = "http://localhost:8000/test_webapp.html"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("test"))
async def test_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Web App"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_or_create_user(user_id, username, first_name)
    balance = user['balance']
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ—Å—Ç–æ–≤—ã–º Web App —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –±–∞–ª–∞–Ω—Å–∞
    webapp_url = f"{LOCAL_WEB_APP_URL}?balance={balance}&user_id={user_id}&test=1"
    web_app = WebAppInfo(url=webapp_url)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üß™ –¢–ï–°–¢ Web App", web_app=web_app)],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å –≤ –ë–î", callback_data="balance")]
    ])
    
    await message.answer(
        f"üß™ <b>–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å –≤ –ë–î: {balance} ‚≠ê\n"
        f"üîó URL: {webapp_url}\n\n"
        f"üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "balance")
async def balance_callback(callback):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ –ë–î"""
    user_id = callback.from_user.id
    balance = await db.get_balance(user_id)
    stats = await db.get_user_stats(user_id)
    
    text = (
        f"üí∞ –ë–∞–ª–∞–Ω—Å –≤ –ë–î: {balance} ‚≠ê\n"
        f"üéØ –°—Ç–∞–≤–æ–∫: {stats['total_bets']} ‚≠ê\n"
        f"üèÜ –í—ã–∏–≥—Ä—ã—à–µ–π: {stats['total_wins']} ‚≠ê\n"
        f"üìà –ü—Ä–∏–±—ã–ª—å: {stats['profit']} ‚≠ê"
    )
    
    await callback.answer(text, show_alert=True)

@dp.message(F.web_app_data)
async def web_app_data(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Web App"""
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        
        if data.get('action') == 'bet_result':
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_balance = data.get('balance', 0)
            old_balance = await db.get_balance(user_id)
            
            await db.update_balance(user_id, new_balance)
            
            bet = data.get('bet', 0)
            multiplier = data.get('multiplier', 1)
            win = data.get('win', 0)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞–≤–∫–∏
            await db.record_bet(user_id, bet, win)
            
            # –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç
            await message.answer(
                f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:</b>\n\n"
                f"üí∞ –ë—ã–ª–æ: {old_balance} ‚≠ê\n"
                f"üéØ –°—Ç–∞–≤–∫–∞: {bet} ‚≠ê\n"
                f"üé≤ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier}X\n"
                f"üèÜ –í—ã–∏–≥—Ä—ã—à: {win} ‚≠ê\n"
                f"üí∞ –°—Ç–∞–ª–æ: {new_balance} ‚≠ê\n"
                f"{'üéâ –î–ñ–ï–ö–ü–û–¢!' if multiplier == 10 else 'üéØ –û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞'}",
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –ë–û–¢–ê")
    print("=" * 40)
    
    await db.init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    
    print(f"üåê –õ–æ–∫–∞–ª—å–Ω—ã–π Web App: {LOCAL_WEB_APP_URL}")
    print("üìù –ö–æ–º–∞–Ω–¥—ã:")
    print("   /test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Web App")
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    await dp.start_polling(bot, drop_pending_updates=True)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")