#!/usr/bin/env python3
"""
üöÄ –ü–û–õ–ù–´–ô –ó–ê–ü–£–°–ö –ü–†–û–ï–ö–¢–ê –í –î–ï–ú–û-–†–ï–ñ–ò–ú–ï
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
"""

import asyncio
import os
import json
from database import db

print("üé∞ –ö–ê–ó–ò–ù–û-–ë–û–¢ - –ü–û–õ–ù–´–ô –ó–ê–ü–£–°–ö –ü–†–û–ï–ö–¢–ê")
print("=" * 60)

async def run_full_project_demo():
    """–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
    print("\nüìö 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("-" * 40)
    await db.init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —Å–æ–∑–¥–∞–Ω–∞: users.db")
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–æ—Ç–æ–≤–∞")
    
    # 2. –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê
    print("\nüìÅ 2. –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê")
    print("-" * 40)
    
    files_to_check = [
        "telegram_bot.py",
        "database.py", 
        "requirements.txt",
        "index.html",
        "README.md"
    ]
    
    for filename in files_to_check:
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            print(f"‚úÖ {filename:<20} ({size:,} –±–∞–π—Ç)")
        else:
            print(f"‚ùå {filename:<20} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    # 3. –°–û–ó–î–ê–ù–ò–ï –î–ï–ú–û-–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    print("\nüë• 3. –°–û–ó–î–ê–ù–ò–ï –î–ï–ú–û-–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("-" * 40)
    
    demo_users = [
        (111111111, "alice_winner", "–ê–ª–∏—Å–∞", 2500),
        (222222222, "bob_player", "–ë–æ–±", 800), 
        (333333333, "charlie_luck", "–ß–∞—Ä–ª–∏", 1800),
        (444444444, "diana_pro", "–î–∏–∞–Ω–∞", 3200),
        (555555555, "eve_newbie", "–ï–≤–∞", 1000)
    ]
    
    for user_id, username, first_name, balance in demo_users:
        user = await db.get_or_create_user(user_id, username, first_name)
        await db.update_balance(user_id, balance)
        print(f"üë§ {first_name:<8} (@{username:<12}) - {balance:>4} ‚≠ê")
    
    # 4. –°–ò–ú–£–õ–Ø–¶–ò–Ø –ò–ì–†–û–í–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò  
    print("\nüé≤ 4. –°–ò–ú–£–õ–Ø–¶–ò–Ø –ò–ì–†–û–í–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò")
    print("-" * 40)
    
    # –ê–ª–∏—Å–∞ - –¥–∂–µ–∫–ø–æ—Ç
    await db.record_bet(111111111, 200, 2000)
    print("üéâ –ê–ª–∏—Å–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ –¥–∂–µ–∫–ø–æ—Ç: —Å—Ç–∞–≤–∫–∞ 200 ‚Üí –≤—ã–∏–≥—Ä—ã—à 2000 ‚≠ê")
    
    # –ë–æ–± - –Ω–µ—É–¥–∞—á–Ω–∞—è —Å–µ—Ä–∏—è
    await db.record_bet(222222222, 300, 0)
    await db.record_bet(222222222, 400, 200)  
    print("üòî –ë–æ–± –∏–≥—Ä–∞–ª –Ω–µ—É–¥–∞—á–Ω–æ: –ø—Ä–æ–∏–≥—Ä–∞–ª 300, –≤—ã–∏–≥—Ä–∞–ª 200 ‚≠ê")
    
    # –ß–∞—Ä–ª–∏ - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∏–≥—Ä–∞
    await db.record_bet(333333333, 200, 400)
    await db.record_bet(333333333, 300, 600)
    print("üéØ –ß–∞—Ä–ª–∏ –∏–≥—Ä–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ: –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–¥–∞—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫")
    
    # –î–∏–∞–Ω–∞ - –∫—Ä—É–ø–Ω—ã–π –∏–≥—Ä–æ–∫
    await db.record_bet(444444444, 500, 1500)
    await db.record_bet(444444444, 800, 800)
    print("üíé –î–∏–∞–Ω–∞ - VIP –∏–≥—Ä–æ–∫: –∫—Ä—É–ø–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∏ –≤—ã–∏–≥—Ä—ã—à–∏")
    
    # 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î –ë–û–¢–ê
    print("\nü§ñ 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î –ë–û–¢–ê")
    print("-" * 40)
    
    # /start
    print("üìã –ö–æ–º–∞–Ω–¥–∞ /start:")
    test_user = await db.get_or_create_user(999999999, "test_user", "–¢–µ—Å—Ç")
    print(f"   ‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: –±–∞–ª–∞–Ω—Å {test_user['balance']} ‚≠ê")
    
    # /balance
    print("üí∞ –ö–æ–º–∞–Ω–¥–∞ /balance:")
    balance = await db.get_balance(999999999)
    print(f"   üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {balance} ‚≠ê")
    
    # /stats
    print("üìä –ö–æ–º–∞–Ω–¥–∞ /stats:")
    await db.record_bet(999999999, 200, 600)
    stats = await db.get_user_stats(999999999)
    print(f"   üìä –°—Ç–∞–≤–æ–∫: {stats['total_bets']} ‚≠ê")
    print(f"   üèÜ –í—ã–∏–≥—Ä—ã—à–µ–π: {stats['total_wins']} ‚≠ê") 
    print(f"   üìà –ü—Ä–∏–±—ã–ª—å: {stats['profit']} ‚≠ê")
    
    # /top
    print("üèÜ –ö–æ–º–∞–Ω–¥–∞ /top:")
    top_users = await db.get_top_users(5)
    for i, user in enumerate(top_users, 1):
        emoji = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"][i-1]
        profit = user['total_wins'] - user['total_bets']
        print(f"   {emoji} {user['first_name']:<8} - {user['balance']:>4} ‚≠ê (–ø—Ä–∏–±—ã–ª—å: {profit:+d})")
    
    # 6. –ü–†–û–í–ï–†–ö–ê WEB APP
    print("\nüåê 6. –ü–†–û–í–ï–†–ö–ê WEB APP")
    print("-" * 40)
    
    if os.path.exists("index.html"):
        with open("index.html", "r", encoding="utf-8") as f:
            content = f.read()
            if "roulette" in content.lower() and "telegram" in content.lower():
                print("‚úÖ index.html —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–≥—Ä—É-—Ä—É–ª–µ—Ç–∫—É")
                print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Web App")
                print("üåç URL: https://sudoxen.github.io/telegram-roulette-app/")
            else:
                print("‚ö†Ô∏è index.html –Ω–∞–π–¥–µ–Ω, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º")
    else:
        print("‚ùå index.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    print("\nüìà 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê")
    print("-" * 40)
    
    all_users = await db.get_top_users(100)  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    total_users = len(all_users)
    total_balance = sum(user['balance'] for user in all_users)
    total_bets = sum(user['total_bets'] for user in all_users)
    total_wins = sum(user['total_wins'] for user in all_users)
    
    print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    print(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:,} ‚≠ê")
    print(f"üéØ –û–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {total_bets:,} ‚≠ê")
    print(f"üèÜ –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π: {total_wins:,} ‚≠ê")
    print(f"üé∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∑–∏–Ω–æ: {(total_bets / total_users):.1f} ‚≠ê –Ω–∞ –∏–≥—Ä–æ–∫–∞")
    
    # 8. –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê
    print("\nüì¶ 8. –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê")
    print("-" * 40)
    
    project_files = [
        ("telegram_bot.py", "ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞"),
        ("database.py", "üóÑÔ∏è –ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
        ("users.db", "üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite"),
        ("requirements.txt", "üìã –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python"),
        ("index.html", "üåê Web App –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
        ("README.md", "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
        ("DATABASE_README.md", "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ë–î"),
        ("test_database.py", "üß™ –¢–µ—Å—Ç—ã –ë–î"),
        ("demo_database.py", "üé≠ –î–µ–º–æ –ë–î"),
        ("test_bot_offline.py", "ü§ñ –û—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç—ã"),
        ("TOKEN_FIX.md", "üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É"),
        ("CHECKLIST.md", "‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞")
    ]
    
    for filename, description in project_files:
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            print(f"‚úÖ {filename:<20} - {description} ({size:,} –±–∞–π—Ç)")
    
    print("\n" + "=" * 60)
    print("üéâ –ü–†–û–ï–ö–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ï–ù!")
    print("=" * 60)
    print()
    print("üìã –ß–¢–û –†–ê–ë–û–¢–ê–ï–¢:")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")
    print("‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (/start, /balance, /stats, /top, /reset)")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤")
    print("‚úÖ Web App –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    print()
    print("üîß –î–õ–Ø –ó–ê–ü–£–°–ö–ê –° TELEGRAM:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –≤ telegram_bot.py")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python telegram_bot.py")
    print()
    print("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")

if __name__ == "__main__":
    asyncio.run(run_full_project_demo())