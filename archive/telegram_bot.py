import asyncio
import json
from aiogram import Bot, Dispatcher, F
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, MenuButtonWebApp, BotCommand
from aiogram.filters import Command
from database import db

# üîë –¢–û–ö–ï–ù –û–¢ BOTFATHER
BOT_TOKEN = "8211492486:AAEdPWoquZmjHdDaf0e-lqLrkjn57K8q-gM"

# üåê URL –≤–∞—à–µ–≥–æ Web App –Ω–∞ GitHub Pages
WEB_APP_URL = "https://sudoxen.github.io/telegram-roulette-app/"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—É—Å–∫ Web App"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_or_create_user(user_id, username, first_name)
    balance = user['balance']
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å Web App —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –±–∞–ª–∞–Ω—Å–∞
    webapp_url = f"{WEB_APP_URL}?balance={balance}&user_id={user_id}"
    web_app = WebAppInfo(url=webapp_url)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É", web_app=web_app)],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])
    
    await message.answer(
        f"üéâ –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ-–±–æ—Ç! üé∞\n"
        f"–£ –≤–∞—Å {balance} ‚≠ê –¥–ª—è –∏–≥—Ä—ã\n\n"
        f"üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É:",
        reply_markup=keyboard
    )

@dp.message(Command("webapp"))
async def webapp_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /webapp - –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ Web App"""
    user_id = message.from_user.id
    balance = await db.get_balance(user_id)
    
    webapp_url = f"{WEB_APP_URL}?balance={balance}&user_id={user_id}"
    web_app = WebAppInfo(url=webapp_url)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É", web_app=web_app)]
    ])
    
    await message.answer(
        "üéØ –ó–∞–ø—É—Å–∫ –∫–∞–∑–∏–Ω–æ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.message(Command("balance"))
async def balance_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /balance - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"""
    user_id = message.from_user.id
    balance = await db.get_balance(user_id)
    
    await message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n\n"
        f"üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 200 ‚≠ê\n"
        f"üé≤ –ú–Ω–æ–∂–∏—Ç–µ–ª–∏: 1X, 10X"
    )

@dp.message(Command("help"))
async def help_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
    help_text = """
üé∞ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É:</b>

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üé∞ –ò–≥—Ä–∞—Ç—å"
2Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É 200 ‚≠ê
3Ô∏è‚É£ –ö—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
4Ô∏è‚É£ –í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ —Å –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏ 1X –∏–ª–∏ 10X!

üí∞ <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/balance - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/top - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
/webapp - –∏–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å (0 ‚≠ê)
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üçÄ –£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!
"""
    
    await message.answer(help_text, parse_mode="HTML")

@dp.message(Command("stats"))
async def stats_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = message.from_user.id
    stats = await db.get_user_stats(user_id)
    
    if stats:
        profit_emoji = "üìà" if stats['profit'] >= 0 else "üìâ"
        await message.answer(
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {stats['balance']} ‚≠ê\n"
            f"üéØ –û–±—â–∏—Ö —Å—Ç–∞–≤–æ–∫: {stats['total_bets']} ‚≠ê\n"
            f"üèÜ –û–±—â–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π: {stats['total_wins']} ‚≠ê\n"
            f"{profit_emoji} –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {stats['profit']} ‚≠ê\n"
            f"üìÖ –í –∏–≥—Ä–µ —Å: {stats['created_at'][:10]}",
            parse_mode="HTML"
        )
    else:
        await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

@dp.message(Command("top"))
async def top_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /top - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"""
    top_users = await db.get_top_users(10)
    
    if top_users:
        text = "üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n\n"
        for i, user in enumerate(top_users, 1):
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}Ô∏è‚É£"
            name = user['first_name'] or user['username'] or f"User {user['user_id']}"
            profit = user['total_wins'] - user['total_bets']
            profit_emoji = "üìà" if profit >= 0 else "üìâ"
            text += f"{emoji} {name}\nüí∞ {user['balance']} ‚≠ê {profit_emoji} {profit:+d}\n\n"
        
        await message.answer(text, parse_mode="HTML")
    else:
        await message.answer("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç")

@dp.message(Command("reset"))
async def reset_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /reset - —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å"""
    user_id = message.from_user.id
    await db.reset_user_balance(user_id, 0)
    
    await message.answer(
        "üîÑ <b>–ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω!</b>\n\n"
        "üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: 0 ‚≠ê\n"
        "üéÆ –£–¥–∞—á–∏ –≤ –Ω–æ–≤—ã—Ö –∏–≥—Ä–∞—Ö!",
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "balance")
async def balance_callback(callback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    user_id = callback.from_user.id
    balance = await db.get_balance(user_id)
    
    await callback.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê", show_alert=True)

@dp.callback_query(F.data == "stats")
async def stats_callback(callback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = callback.from_user.id
    stats = await db.get_user_stats(user_id)
    
    if stats:
        profit_emoji = "üìà" if stats['profit'] >= 0 else "üìâ"
        stats_text = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {stats['balance']} ‚≠ê\n"
            f"üéØ –û–±—â–∏—Ö —Å—Ç–∞–≤–æ–∫: {stats['total_bets']} ‚≠ê\n"
            f"üèÜ –û–±—â–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π: {stats['total_wins']} ‚≠ê\n"
            f"{profit_emoji} –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {stats['profit']} ‚≠ê\n"
            f"üìÖ –í –∏–≥—Ä–µ —Å: {stats['created_at'][:10]}"
        )
    else:
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    await callback.answer(stats_text, show_alert=True)

# üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App
@dp.message(F.web_app_data)
async def web_app_data(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        
        if data.get('action') == 'get_balance':
            # –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç Web App
            current_balance = await db.get_balance(user_id)
            await message.answer(
                f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} ‚≠ê\n"
                f"üîÑ –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –≤ Web App –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∑–∞–∫—Ä–æ–π—Ç–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ."
            )
        
        elif data.get('action') == 'bet_result':
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_balance = data.get('balance', 0)
            await db.update_balance(user_id, new_balance)
            
            bet = data.get('bet', 0)
            multiplier = data.get('multiplier', 1)
            win = data.get('win', 0)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞–≤–∫–∏
            await db.record_bet(user_id, bet, win)
            
            if multiplier == 10:
                # –î–∂–µ–∫–ø–æ—Ç!
                await message.answer(
                    f"üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –î–ñ–ï–ö–ü–û–¢! üéâ\n\n"
                    f"üí∞ –°—Ç–∞–≤–∫–∞: {bet} ‚≠ê\n"
                    f"üé≤ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier}X\n"
                    f"üíé –í—ã–∏–≥—Ä—ã—à: {win} ‚≠ê\n"
                    f"üè¶ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚≠ê"
                )
            else:
                await message.answer(
                    f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:\n\n"
                    f"üí∞ –°—Ç–∞–≤–∫–∞: {bet} ‚≠ê\n"
                    f"üé≤ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier}X\n"
                    f"üíµ –í—ã–∏–≥—Ä—ã—à: {win} ‚≠ê\n"
                    f"üè¶ –ë–∞–ª–∞–Ω—Å: {new_balance} ‚≠ê"
                )
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
        print(f"–û—à–∏–±–∫–∞ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")

async def set_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üé∞ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"),
        BotCommand(command="webapp", description="üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É"),
        BotCommand(command="balance", description="üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand(command="top", description="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"),
        BotCommand(command="reset", description="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å")
    ]
    
    await bot.set_my_commands(commands)

async def set_menu_button():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è Web App"""
    web_app = WebAppInfo(url=WEB_APP_URL)
    menu_button = MenuButtonWebApp(text="üé∞ –†—É–ª–µ—Ç–∫–∞", web_app=web_app)
    await bot.set_chat_menu_button(menu_button=menu_button)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–∞–∑–∏–Ω–æ-–±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
    await set_commands()
    await set_menu_button()
    
    print("‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!")
    print(f"üåê Web App URL: {WEB_APP_URL}")
    print("üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω!")
    print("üíæ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ users.db")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot, drop_pending_updates=True)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")